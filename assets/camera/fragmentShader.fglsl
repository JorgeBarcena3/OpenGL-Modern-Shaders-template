#version 330

#define POINT_N 5
#define DIRECTIONAL_N 1

struct Material
{
        vec3 Ka;
        vec3 Kd;
        vec3 Ks;

};

struct DirectionalLight {

    int eneabled;
    vec3 direction;
  
    vec3 color;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec3 intensity;

};  

struct PointLight {  

    int eneabled;
    vec3 position;
    
    vec3 color;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    vec3 intensity;
};  

// Arrays que guardan la informacion de las luces
uniform PointLight pointLights[POINT_N];
uniform DirectionalLight directionalLight[DIRECTIONAL_N];

//Informacion del material
uniform Material myMaterial;

// Textura de donde se va a obtener el color difuso
uniform sampler2D diffuse_sampler;

// Variable de salida
out vec4 fragment_color;

// Variable de entradas desde el vertex shader
in vec2 tx_coord;
in vec3 normal_vec;
in vec3 vertex_pos;
in vec3 camera_position;

// Declaraciones adelantadas de las funciones para calcular la iluminacion
vec4 CalculateDirectionalLight(DirectionalLight light, vec3 N, vec3 L);  
vec4 CalculatePointLight(PointLight light, vec3 N, vec3 P, vec3 L);  

void main()
{

    vec3 N = normalize(normal_vec);
    vec3 L = normalize(camera_position - vertex_pos);

    vec4 finalColor = vec4(0);
    int lights = 0;

    for(int i = 0; i < DIRECTIONAL_N; i++)
    {
        if(directionalLight[i].eneabled == 1)
        {
            finalColor += CalculateDirectionalLight(directionalLight[i], N, L);
            lights += 1;
        }
    }

    for(int i = 0; i < POINT_N; i++)
    {
        if(pointLights[i].eneabled == 1)
        {
            finalColor += CalculatePointLight(pointLights[i], N, vertex_pos, L);
            lights += 1;
        }
    }

    finalColor /= lights;

    vec4 alphaValue = texture(diffuse_sampler, tx_coord);
    fragment_color = vec4(vec3(finalColor), alphaValue.a);
}

vec4 CalculateDirectionalLight(DirectionalLight light, vec3 N, vec3 L)
{

    vec3 lightDirection = normalize(-light.direction);
    
    // Valor difuso
    float diffuse_value = max(dot(N, lightDirection), 0.0);

    // Valor Specular
    vec3 reflectDir = reflect(-lightDirection, N);
    float spec = pow(max(dot(L, reflectDir), 0.0), 1);

    vec3 materialColor = vec3(texture(diffuse_sampler, tx_coord));

    // Combinamos los resultados
    vec3 ambient  = light.ambient * light.color * myMaterial.Ka;
    vec3 diffuse  = diffuse_value * light.diffuse * myMaterial.Kd * materialColor;
    vec3 specular = spec * light.specular * myMaterial.Ks * light.color;

    return vec4(light.intensity * (ambient + diffuse + specular), 1);
   

}  

vec4 CalculatePointLight(PointLight light, vec3 N, vec3 P, vec3 L)
{
     vec3 lightDir = normalize(light.position - P);

    // Valor difuso
    float diffuse_value = max(dot(N, lightDir), 0.0);

    // Valor Specular
    vec3 reflectDir = reflect(-lightDir, N);
    float spec = max(dot(L, reflectDir), 0.0);

    // Atenuacion
    float distance    = length(light.position - P);
    float attenuation = 1 / ( (1.09 * distance) + 0.032f * (distance * distance) );
    
    vec3 materialColor = vec3(texture(diffuse_sampler, tx_coord));

    // Combinamos los resultados
    vec3 ambient  = light.ambient * light.color * myMaterial.Ka;
    vec3 diffuse  = diffuse_value * light.diffuse * myMaterial.Kd * materialColor;
    vec3 specular = spec * light.specular * myMaterial.Ks * light.color;

    ambient   *= attenuation;
    diffuse   *= attenuation;
    specular  *= attenuation;

    return  vec4(light.intensity * (ambient + diffuse + specular), 1);
} 